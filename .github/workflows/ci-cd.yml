# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build Docker image
#         run: |
#           docker build --no-cache -t alirhayem/docker-cicd-test:latest .

#       - name: Push Docker image
#         run: |
#           docker push alirhayem/docker-cicd-test:latest

#       - name: Force stop and remove existing Docker container (if exists)
#         run: |
#           docker rm -f docker-cicd-test || true
#           sleep 5  # Add a delay to ensure the container is fully removed

#       - name: Pull and run Docker container
#         run: |
#           docker pull alirhayem/docker-cicd-test:latest
#           docker run -d -p 8000:8000 --name docker-cicd-test alirhayem/docker-cicd-test:latest

#       - name: Inspect Docker logs
#         run: |
#           docker logs docker-cicd-test


name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Build Docker image
        run: |
          docker build -t myapp:latest .
          
      - name: Test Docker image
        run: |
          docker run --rm myapp:latest npm test
        
      - name: Push Docker image to Docker Hub
        if: github.event_name == 'push'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag myapp:latest mydockerhubusername/myapp:latest
          docker push mydockerhubusername/myapp:latest
